name: "Snap Gen"
description: "Run snapgen to create MCP server for APIs. Input dir contains API source code."
branding:
  icon: "chevron-right"
  color: "purple"

inputs:
  input_directory:
    description: 'Input directory containing API source code (relative to workspace). Defaults to project root.'
    required: false
    default: '.'
  create_pr:
    description: 'Create PR with generated code. Falls back to artifact upload if no push permissions.'
    required: false
    default: false
    type: boolean
  create_branch_and_commit:
    description: 'Create branch and commit with generated code. Falls back to artifact upload if no push permissions.'
    required: false
    default: false
    type: boolean

runs:
  using: "composite"
  steps:
    - name: Run snapgen MCP gen
      shell: bash
      run: |
        mkdir -p "generated-mcp"
        echo "Running container..."
        
        # Handle directory mounting (defaults to project root)
        if [[ "${{ inputs.input_directory }}" == "." ]] || [[ -z "${{ inputs.input_directory }}" ]]; then
          INPUT_PATH="${{ github.workspace }}"
        else
          INPUT_PATH="${{ github.workspace }}/${{ inputs.input_directory }}"
        fi
        
        docker run --rm \
          -e GITHUB_REPOSITORY="${{ github.repository }}" \
          -e GITHUB_ACTOR="${{ github.actor }}" \
          -e GITHUB_ACTIONS=$GITHUB_ACTIONS \
          -v "$INPUT_PATH:/app/input" \
          -v "${{ github.workspace }}/generated-mcp:/app/output" \
          ghcr.io/codeglide/mcpgen:latest

    - name: Create PR / Branch
      if: ${{ inputs.create_pr || inputs.create_branch_and_commit }}
      shell: bash
      id: branch_creation
      continue-on-error: true
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Configure git with GitHub Actions identity
        git config --global user.name "snapgen-[bot]"
        git config --global user.email "snapgen-[bot]@users.noreply.github.com"

        # Create new branch
        BRANCH_NAME="feat/mcp-server-updated/$(date +%Y-%m-%d)--$(date +%H-%M-%S)"
        git checkout -b $BRANCH_NAME
        
        # Determine MCP directory path based on input directory
        if [[ "${{ inputs.input_directory }}" == "." ]] || [[ -z "${{ inputs.input_directory }}" ]]; then
          MCP_DIR="MCP"
        else
          MCP_DIR="${{ inputs.input_directory }}/MCP"
        fi
        
        # Create MCP directory if it doesn't exist
        mkdir -p "$MCP_DIR"
        
        # Copy generated files
        cp -r generated-mcp/* "$MCP_DIR/"
        
        # Commit and push
        git add "$MCP_DIR"
        git commit -m "feat: snapgen Auto-generated MCP server code

        Triggered by: @${{ github.actor }}"
        
        # Try to push the branch
        if git push origin $BRANCH_NAME; then
          echo "Branch created and pushed successfully!"
          echo "Branch name: $BRANCH_NAME"
          
          # Try to create PR if requested
          if [[ "${{ inputs.create_pr }}" == "true" ]]; then
            if gh pr create \
              --base "main" \
              --head "$BRANCH_NAME" \
              --title "feat: Update MCP server with latest generated code" \
              --body "Auto generated PR with MCP server code by snapgen.

              **Generated from:** \`${{ inputs.input_directory }}\`
              **Generated by:** snapgen MCP Generator
              **Triggered by:** @${{ github.actor }}" > /dev/null 2>&1; then
              echo "Pull request created successfully!"
              echo "View PR at: https://github.com/${{ github.repository }}/pull/..."
            else
              echo "Could not create PR (insufficient permissions)"
              echo "To create a PR manually, visit:"
              echo "https://github.com/${{ github.repository }}/compare/main...$BRANCH_NAME"
            fi
          else
            echo "To create a PR manually, visit:"
            echo "https://github.com/${{ github.repository }}/compare/main...$BRANCH_NAME"
          fi
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "Failed to push branch. Will upload as artifact instead."
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Upload MCP Server
      if: ${{ !inputs.create_pr && !inputs.create_branch_and_commit || (steps.branch_creation.outputs.success != 'true') }}
      uses: actions/upload-artifact@v4
      with:
        name: generated-mcp
        path: generated-mcp/ 
